#This solution, non-production-ready template describes AWS Codepipeline based CICD Pipeline for terraform code deployment.
#Â© 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
#This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
#http://aws.amazon.com/agreement or other written agreement between Customer and either
#Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.
#Edited the code for security scan commands

version: 0.2

env:
  variables:
    CODE_SRC_DIR: "."
    # TF_VERSION: "1.6.4"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "yum install -y yum-utils"
      - "yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo"
      - "yum -y install terraform"
  build:
    commands:
      - "echo ${CODEBUILD_SRC_DIR}"
      - "echo ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - "cd ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - "terraform init"
      - "echo ## TERRAFORM PLAN : Generate the Terraform Plan"
      - "terraform plan -out tfapply"
      - curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-arm64 && chmod +x wizcli
      - ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      - ./wizcli dir scan --path . --policy "Revvity Data Security policy,Revvity Secret Management Policy,Revvity Vulnerability Management policy"
      - ./wizcli iac scan --path . --policy "Revvity Infrastructure As Code Policy"

artifacts:
  files:
    - '**/*'
